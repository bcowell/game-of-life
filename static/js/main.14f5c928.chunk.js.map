{"version":3,"sources":["components/Game.js","components/config.js","components/utils.js","components/Cell.js","components/GameObject.js","components/Pattern.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["canvas","context","board","canvasWidth","canvasHeight","cellWidth","cellHeight","cellColour","boardBackgroundColour","randomInt","max","Math","floor","random","roundToNearest","x","ceil","config","Cell","y","colour","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","width","height","fillStyle","isColliding","fillRect","GameObject","Pattern","pattern","numCells","utils","i","rX","rY","push","Board","createInitialBoardState","draw","clear","forEach","cell","update","advanceGeneration","length","newBoard","map","liveNeighbours","detectCollisions","splice","createDeadBoard","deadBoard","_loop","_loop2","j","find","neighboursEdgeX","neighboursEdgeY","startX","endX","min","startY","endY","searchResults","_","filter","clearRect","Game","props","createHTML5Canvas","canvasRef","current","getContext","gameTick","state","gameLoopRunning","setTimeout","window","requestAnimationFrame","tickSpeed","handleChange","name","event","setState","defineProperty","target","checked","tickSpeedHandleChange","value","createRef","react_default","a","createElement","Grid_default","container","spacing","item","xs","FormControl_default","FormGroup_default","FormControlLabel_default","control","Switch_default","onChange","color","label","type","style","Checkbox_default","Button_default","variant","ref","className","Component","App","components_Game","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.14f5c928.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\r\nimport * as config from './config';\r\nimport Board from './Board';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nlet canvas;\r\nlet context;\r\nlet board;\r\n\r\nclass Game extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = createRef();\r\n        this.state = {\r\n            tickSpeed: 300,\r\n            gameLoopRunning: true,\r\n            pattern: 'random',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createHTML5Canvas();\r\n        board = new Board(context, canvas, this.state.pattern);\r\n        // start game loop\r\n        window.requestAnimationFrame(this.gameTick);\r\n    }\r\n\r\n    createHTML5Canvas = () => {\r\n        // draw context for canvas\r\n        canvas = this.canvasRef.current;\r\n        context = canvas.getContext('2d');\r\n        context.fillStyle = config.boardBackgroundColour;\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    gameTick = () => {\r\n        board.update();\r\n        board.draw();\r\n        if (this.state.gameLoopRunning) {\r\n            setTimeout(\r\n                () => window.requestAnimationFrame(this.gameTick),\r\n                this.state.tickSpeed\r\n            )\r\n        }\r\n    }\r\n\r\n    handleChange = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    tickSpeedHandleChange = event => {\r\n        this.setState({ tickSpeed: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container spacing={18}>\r\n                <Grid item xs>\r\n                    <FormControl>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={this.state.gameLoopRunning}\r\n                                        onChange={this.handleChange('gameLoopRunning')}\r\n                                        value=\"gameLoopRunning\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Run\"\r\n                            />\r\n                            <p>Game speed in ms <input value={this.state.tickSpeed} onChange={this.tickSpeedHandleChange} type=\"number\" style={{ width: \"50px\" }} /></p>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={this.state.pattern === 'random'}\r\n                                        onChange={this.handleChange('pattern')}\r\n                                        value=\"random\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Random\"\r\n                            />\r\n                            <Button variant=\"contained\" color=\"primary\">Start</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <canvas ref={this.canvasRef} className='canvas' width={config.canvasWidth} height={config.canvasHeight}></canvas>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","// dimensions in px\r\nexport const canvasWidth = 300;\r\nexport const canvasHeight = 300;\r\nexport const cellWidth = 5;\r\nexport const cellHeight = 5;\r\n// random number of cells to initialize board, will be between 1 and N\r\nexport const initialNumCells = 30;\r\n// colour, can be hex or css colour string\r\nexport const cellColour = 'red';\r\nexport const boardBackgroundColour = '#282c34';","import * as config from './config';\r\n\r\n// util functions\r\nexport const randomInt = max => Math.floor(Math.random() * Math.floor(max));\r\nexport const roundToNearest = x => Math.floor(Math.ceil(x/config.cellWidth)*config.cellWidth, config.canvasWidth);","import GameObject from './GameObject';\r\nimport * as config from './config';\r\n\r\nclass Cell extends GameObject {\r\n\r\n    constructor(context, x, y, colour) {\r\n        super(context, x, y, colour);\r\n        // Set defaults\r\n        this.width = config.cellWidth;\r\n        this.height = config.cellHeight;\r\n        this.colour = config.cellColour;\r\n    }\r\n\r\n    draw() {\r\n        this.context.fillStyle = this.isColliding ? '#0099b0' : config.cellColour;\r\n        this.context.fillRect(this.x, this.y, this.width, this.height);\r\n    }\r\n}\r\n\r\nexport default Cell;","class GameObject {\r\n    constructor(context, x, y, colour) {\r\n        this.context = context;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.colour = colour;\r\n        this.isColliding = false;\r\n    }\r\n}\r\n\r\nexport default GameObject;","import * as config from './config';\r\nimport * as utils from './utils';\r\nimport Cell from './Cell';\r\n\r\n\r\nclass Pattern {\r\n\r\n    constructor(pattern, context) {\r\n        this.pattern = pattern;\r\n        this.context = context;\r\n        return this.random()\r\n    }\r\n\r\n    random() {\r\n        let board = [];\r\n        let numCells = utils.randomInt(config.initialNumCells) + 1;\r\n        // Create a board of a random number of live cells\r\n        for (let i = 0; i < numCells; i++) {\r\n            let rX = utils.roundToNearest(utils.randomInt(config.canvasWidth));\r\n            let rY = utils.roundToNearest(utils.randomInt(config.canvasHeight));\r\n            //console.log(rX, rY);\r\n            board.push(new Cell(this.context, rX, rY, config.cellColour))\r\n        }\r\n        return board;\r\n    }\r\n}\r\n\r\nexport default Pattern;","import * as config from './config';\r\nimport { roundToNearest } from './utils';\r\nimport _ from 'lodash';\r\nimport Cell from './Cell';\r\nimport Pattern from './Pattern';\r\n\r\n\r\nclass Board {\r\n\r\n    constructor(context, canvas, board, pattern) {\r\n        this.context = context;\r\n        this.canvas = canvas;\r\n        this.board = board;\r\n        this.createInitialBoardState(pattern);\r\n    }\r\n\r\n    createInitialBoardState = (pattern) => {\r\n        this.board = new Pattern(pattern, this.context);\r\n    }\r\n\r\n    clear() {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    draw = () => {\r\n        this.clear();\r\n        this.board.forEach(cell => cell.draw())\r\n    }\r\n\r\n    update = () => {\r\n        this.board = this.advanceGeneration();\r\n        // if at any point the board has a mass extinction\r\n        if (this.board.length === 0) {\r\n            this.createInitialBoardState(); // re init board\r\n        }\r\n    }\r\n\r\n    advanceGeneration = () => {\r\n\r\n        // Reset collision state of all cells\r\n        let newBoard = this.board.map(cell => {\r\n            cell.isColliding = false\r\n            return cell\r\n        });\r\n\r\n        // Check all live cells\r\n        this.board.forEach((cell,i) => {\r\n            let liveNeighbours = this.detectCollisions(cell.x, cell.y);\r\n            // death by underpopulation or overpopulation\r\n            if (liveNeighbours < 2 || liveNeighbours > 3) {\r\n                newBoard.splice(i,1); // remove the cell from the board\r\n            }\r\n        })\r\n\r\n        // Check all dead cells\r\n        // Create a deadBoard for all points not contained in the board\r\n        let deadBoard = this.createDeadBoard();\r\n        \r\n        deadBoard.forEach(cell => {\r\n            let liveNeighbours = this.detectCollisions(cell.x, cell.y);\r\n            // reproduction\r\n            if (liveNeighbours === 3) {\r\n                newBoard.push(new Cell(this.context, cell.x, cell.y, config.cellColour)); // add the cell from the board\r\n            }\r\n        })\r\n\r\n        return newBoard;\r\n    }\r\n\r\n    createDeadBoard = () => {\r\n        let deadBoard = [];\r\n\r\n        for (let i = 0; i < config.canvasWidth; i = i + config.cellWidth) {\r\n            for (let j = 0; j < config.canvasHeight; j = j + config.cellHeight) {\r\n                // can't find the cell in the board, it is dead\r\n                if (!this.board.find(cell => cell.x === i && cell.y === j)) {\r\n                    deadBoard.push(new Cell(this.context, i, j, config.cellColour));\r\n                }\r\n            }\r\n        }\r\n        return deadBoard;\r\n    }\r\n\r\n    // Returns the number of live cells in the eight neighbours of a given x,y\r\n    detectCollisions = (x,y) => {\r\n\r\n        // the distance from the center of the current cell to the edge of the neighbouring cells\r\n        const neighboursEdgeX = roundToNearest(config.cellWidth + config.cellWidth/2);\r\n        const neighboursEdgeY = roundToNearest(config.cellHeight + config.cellHeight/2);\r\n        // Make sure we don't check outside the bounds of the canvas\r\n        // Smallest distance a cell's center can be from the edge of the canvas is half the cell's dimension\r\n        const startX = Math.max(config.cellWidth/2, x - neighboursEdgeX);\r\n        const endX = Math.min(config.canvasWidth - config.cellWidth/2, x + neighboursEdgeX);\r\n        const startY = Math.max(config.cellHeight/2, y - neighboursEdgeY);\r\n        const endY = Math.min(config.canvasHeight - config.cellHeight/2, y + neighboursEdgeY);\r\n\r\n        // Filter board for cells in the surrounding area\r\n        let searchResults = _.filter(this.board, cell => \r\n            // Don't include the cell itself\r\n            (cell.x !== x || cell.y !== y) &&\r\n            // Cell is contained between the startX and startY area\r\n            (startX <= cell.x && cell.x <= endX) &&\r\n            (startY <= cell.y && cell.y <= endY)\r\n        )\r\n\r\n        if (searchResults && searchResults.length > 0) {\r\n            searchResults.forEach(cell => cell.isColliding = true)\r\n        }\r\n        return searchResults.length;\r\n    }\r\n\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Game from './components/Game';\r\nimport './App.css';\r\n\r\nconst App = props =>\r\n    <div className=\"App\">\r\n        <header>\r\n            <h1>Game of Life</h1>\r\n        </header>\r\n        <Game />\r\n    </div>\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}